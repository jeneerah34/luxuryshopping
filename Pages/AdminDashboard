
import React, { useState, useEffect, useCallback } from "react";
import { Product } from "@/entities/Product";
import { Order } from "@/entities/Order";
import { User } from "@/entities/User";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import {
  Package,
  ShoppingCart,
  Users,
  DollarSign,
  Plus,
  Edit,
  Trash2,
  Eye,
  TrendingUp,
  ImageIcon // Added ImageIcon import
} from "lucide-react";
import { toast } from "sonner";
import { Link } from "react-router-dom";
import { createPageUrl } from "@/utils";

export default function AdminDashboard() {
  const [user, setUser] = useState(null);
  const [products, setProducts] = useState([]);
  const [orders, setOrders] = useState([]);
  const [customers, setCustomers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState("overview");

  // Product form state - 'image_url' changed to 'image'
  const [newProduct, setNewProduct] = useState({
    name: "",
    description: "",
    price: "",
    image: "", // Changed from image_url
    category: "",
    stock: "",
    featured: false
  });

  const loadDashboardData = useCallback(async () => {
    try {
      const [productsData, ordersData, usersData] = await Promise.all([
        Product.list("-created_date"),
        Order.list("-created_date"),
        User.list("-created_date")
      ]);

      setProducts(productsData);
      setOrders(ordersData);
      setCustomers(usersData.filter(u => u.role === 'user'));
    } catch (error) {
      console.error("Error loading dashboard data:", error);
    }
  }, []);

  const checkAdminAccess = useCallback(async () => {
    try {
      const currentUser = await User.me();
      if (currentUser.role !== 'admin') {
        toast.error("Access denied. Admin privileges required.");
        return;
      }
      setUser(currentUser);
      await loadDashboardData();
    } catch (error) {
      toast.error("Please log in to access admin dashboard");
    } finally {
      setLoading(false);
    }
  }, [loadDashboardData]);

  useEffect(() => {
    checkAdminAccess();
  }, [checkAdminAccess]);

  const handleAddProduct = async (e) => {
    e.preventDefault();
    try {
      await Product.create({
        ...newProduct,
        price: parseFloat(newProduct.price),
        stock: parseInt(newProduct.stock)
      });

      toast.success("Product added successfully!");
      // Reset form state - 'image_url' changed to 'image'
      setNewProduct({
        name: "",
        description: "",
        price: "",
        image: "", // Changed from image_url
        category: "",
        stock: "",
        featured: false
      });
      await loadDashboardData();
    } catch (error) {
      toast.error("Failed to add product");
      console.error(error);
    }
  };

  const deleteProduct = async (productId) => {
    if (!confirm("Are you sure you want to delete this product?")) return;

    try {
      await Product.delete(productId);
      toast.success("Product deleted successfully!");
      await loadDashboardData();
    } catch (error) {
      toast.error("Failed to delete product");
      console.error(error);
    }
  };

  const updateOrderStatus = async (orderId, newStatus) => {
    try {
      await Order.update(orderId, { status: newStatus });
      toast.success("Order status updated!");
      await loadDashboardData();
    } catch (error) {
      toast.error("Failed to update order status");
      console.error(error);
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen pt-16 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-amber-500 mx-auto mb-4"></div>
          <p>Loading admin dashboard...</p>
        </div>
      </div>
    );
  }

  if (!user || user.role !== 'admin') {
    return (
      <div className="min-h-screen pt-16 flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-red-600 mb-2">Access Denied</h1>
          <p className="text-slate-600">You need admin privileges to access this page</p>
        </div>
      </div>
    );
  }

  const totalRevenue = orders.reduce((sum, order) => sum + order.total_amount, 0);
  const recentOrders = orders.slice(0, 5);

  return (
    <div className="min-h-screen pt-8 pb-16">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-slate-900 mb-2">Admin Dashboard</h1>
          <p className="text-slate-600">Manage your e-commerce platform</p>
        </div>

        <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
          <TabsList className="grid w-full grid-cols-4 bg-white shadow-sm">
            <TabsTrigger value="overview">Overview</TabsTrigger>
            <TabsTrigger value="products">Products</TabsTrigger>
            <TabsTrigger value="orders">Orders</TabsTrigger>
            <TabsTrigger value="customers">Customers</TabsTrigger>
          </TabsList>

          {/* Overview Tab */}
          <TabsContent value="overview" className="space-y-6">
            {/* Stats Cards */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              <Card className="border-0 shadow-lg">
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">Total Products</CardTitle>
                  <Package className="h-4 w-4 text-amber-600" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">{products.length}</div>
                  <p className="text-xs text-slate-600">
                    <TrendingUp className="inline w-3 h-3 mr-1" />
                    Active listings
                  </p>
                </CardContent>
              </Card>

              <Card className="border-0 shadow-lg">
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">Total Orders</CardTitle>
                  <ShoppingCart className="h-4 w-4 text-amber-600" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">{orders.length}</div>
                  <p className="text-xs text-slate-600">All time orders</p>
                </CardContent>
              </Card>

              <Card className="border-0 shadow-lg">
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">Customers</CardTitle>
                  <Users className="h-4 w-4 text-amber-600" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">{customers.length}</div>
                  <p className="text-xs text-slate-600">Registered users</p>
                </CardContent>
              </Card>

              <Card className="border-0 shadow-lg">
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">Revenue</CardTitle>
                  <DollarSign className="h-4 w-4 text-amber-600" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">₹{totalRevenue.toLocaleString('en-IN')}</div>
                  <p className="text-xs text-slate-600">Total sales</p>
                </CardContent>
              </Card>
            </div>

            {/* Recent Orders */}
            <Card className="border-0 shadow-lg">
              <CardHeader className="flex justify-between items-center">
                <CardTitle>Recent Orders</CardTitle>
                <Link to={createPageUrl("AdminOrders")}>
                  <Button variant="outline">View All Orders</Button>
                </Link>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {recentOrders.map((order) => (
                    <div key={order.id} className="flex items-center justify-between p-4 border rounded-lg">
                      <div>
                        <p className="font-medium">Order #{order.id.slice(-8)}</p>
                        <p className="text-sm text-slate-600">{order.user_email}</p>
                      </div>
                      <div className="text-right">
                        <p className="font-medium">₹{order.total_amount.toLocaleString('en-IN')}</p>
                        <Badge variant={
                          order.status === 'delivered' ? 'default' :
                          order.status === 'shipped' ? 'secondary' :
                          order.status === 'confirmed' ? 'outline' : 'destructive'
                        }>
                          {order.status}
                        </Badge>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Products Tab */}
          <TabsContent value="products" className="space-y-6">
            <div className="grid lg:grid-cols-3 gap-6">
              {/* Add Product Form */}
              <Card className="border-0 shadow-lg">
                <CardHeader>
                  <CardTitle className="flex items-center">
                    <Plus className="w-5 h-5 mr-2" />
                    Add New Product
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <form onSubmit={handleAddProduct} className="space-y-4">
                    <div>
                      <Label htmlFor="name">Product Name</Label>
                      <Input
                        id="name"
                        value={newProduct.name}
                        onChange={(e) => setNewProduct({...newProduct, name: e.target.value})}
                        required
                      />
                    </div>
                    <div>
                      <Label htmlFor="description">Description</Label>
                      <Textarea
                        id="description"
                        value={newProduct.description}
                        onChange={(e) => setNewProduct({...newProduct, description: e.target.value})}
                        required
                      />
                    </div>
                    <div>
                      <Label htmlFor="price">Price (₹)</Label>
                      <Input
                        id="price"
                        type="number"
                        step="0.01"
                        value={newProduct.price}
                        onChange={(e) => setNewProduct({...newProduct, price: e.target.value})}
                        required
                      />
                    </div>
                    <div>
                      <Label htmlFor="image">Image URL</Label> {/* Changed htmlFor to 'image' */}
                      <Input
                        id="image" // Changed id to 'image'
                        value={newProduct.image} // Changed newProduct.image_url to newProduct.image
                        onChange={(e) => setNewProduct({...newProduct, image: e.target.value})} // Changed image_url to image
                        placeholder="https://example.com/image.jpg" // Updated placeholder
                      />
                    </div>
                    <div>
                      <Label htmlFor="category">Category</Label>
                      <Select
                        value={newProduct.category}
                        onValueChange={(value) => setNewProduct({...newProduct, category: value})}
                      >
                        <SelectTrigger>
                          <SelectValue placeholder="Select category" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="electronics">Electronics</SelectItem>
                          <SelectItem value="clothing">Clothing</SelectItem>
                          <SelectItem value="books">Books</SelectItem>
                          <SelectItem value="home">Home</SelectItem>
                          <SelectItem value="sports">Sports</SelectItem>
                          <SelectItem value="beauty">Beauty</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    <div>
                      <Label htmlFor="stock">Stock Quantity</Label>
                      <Input
                        id="stock"
                        type="number"
                        value={newProduct.stock}
                        onChange={(e) => setNewProduct({...newProduct, stock: e.target.value})}
                        required
                      />
                    </div>
                    <Button type="submit" className="w-full bg-gradient-to-r from-amber-500 to-amber-600">
                      Add Product
                    </Button>
                  </form>
                </CardContent>
              </Card>

              {/* Products List */}
              <div className="lg:col-span-2">
                <Card className="border-0 shadow-lg">
                  <CardHeader>
                    <CardTitle>All Products ({products.length})</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      {products.map((product) => (
                        <div key={product.id} className="flex items-center justify-between p-4 border rounded-lg">
                          <div className="flex items-center space-x-4">
                            <div className="w-16 h-16 overflow-hidden rounded-lg bg-slate-100 flex items-center justify-center">
                              {product.image ? ( // Check for product.image existence
                                <img
                                  src={product.image} // Use product.image
                                  alt={product.name}
                                  className="w-full h-full object-cover"
                                  onError={(e) => { // Handle image loading errors
                                    e.currentTarget.style.display = 'none'; // Hide the broken image
                                    const fallbackIconDiv = e.currentTarget.parentNode.querySelector('.fallback-icon');
                                    if (fallbackIconDiv) {
                                        fallbackIconDiv.style.display = 'flex'; // Show the fallback icon
                                    }
                                  }}
                                />
                              ) : null}
                              {/* Fallback icon for missing or broken images */}
                              <div className="w-full h-full flex items-center justify-center fallback-icon" 
                                   style={{display: product.image ? 'none' : 'flex'}}> {/* Initially hidden if image exists */}
                                <ImageIcon className="w-8 h-8 text-slate-400" />
                              </div>
                            </div>
                            <div>
                              <h3 className="font-medium">{product.name}</h3>
                              <p className="text-sm text-slate-600">₹{product.price.toLocaleString('en-IN')} • Stock: {product.stock}</p>
                              <Badge variant="outline" className="mt-1">
                                {product.category}
                              </Badge>
                            </div>
                          </div>
                          <div className="flex items-center space-x-2">
                            <Button variant="outline" size="sm">
                              <Edit className="w-4 h-4" />
                            </Button>
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => deleteProduct(product.id)}
                              className="text-red-600 hover:text-red-700"
                            >
                              <Trash2 className="w-4 h-4" />
                            </Button>
                          </div>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              </div>
            </div>
          </TabsContent>

          {/* Orders Tab */}
          <TabsContent value="orders">
             <Card className="border-0 shadow-lg">
                <CardHeader>
                  <CardTitle>Manage Orders</CardTitle>
                </CardHeader>
                <CardContent className="text-center py-12">
                   <p className="text-slate-600 mb-4">All orders are now managed on a dedicated page for a better experience.</p>
                   <Link to={createPageUrl("AdminOrders")}>
                      <Button>Go to Admin Orders Page</Button>
                   </Link>
                </CardContent>
             </Card>
          </TabsContent>

          {/* Customers Tab */}
          <TabsContent value="customers" className="space-y-6">
            <Card className="border-0 shadow-lg">
              <CardHeader>
                <CardTitle>All Customers ({customers.length})</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {customers.map((customer) => (
                    <div key={customer.id} className="flex items-center justify-between p-4 border rounded-lg">
                      <div>
                        <h3 className="font-medium">{customer.full_name}</h3>
                        <p className="text-sm text-slate-600">{customer.email}</p>
                        <p className="text-sm text-slate-600">
                          Joined: {new Date(customer.created_date).toLocaleDateString()}
                        </p>
                      </div>
                      <div className="text-right">
                        <p className="font-medium">
                          {orders.filter(o => o.user_email === customer.email).length} orders
                        </p>
                        <p className="text-sm text-slate-600">
                          ₹{orders
                            .filter(o => o.user_email === customer.email)
                            .reduce((sum, o) => sum + o.total_amount, 0)
                            .toLocaleString('en-IN')} total
                        </p>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}
